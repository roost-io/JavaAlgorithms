
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unitdemo using AI Type  and AI Model

ROOST_METHOD_HASH=encrypt_f7ab1f7114
ROOST_METHOD_SIG_HASH=encrypt_6cda6a04c6

Based on the provided information, here are several test scenarios for the `encrypt` method in the `Polybius` class:

```
Scenario 1: Encrypt a Simple String

Details:
  TestName: encryptSimpleString
  Description: Test the encryption of a simple string containing only uppercase letters.
Execution:
  Arrange: Prepare a simple string input "HELLO"
  Act: Call Polybius.encrypt("HELLO")
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Verify that each letter is correctly converted to its corresponding two-digit code according to the Polybius square. This test ensures the basic functionality of the encryption method for standard input.

Scenario 2: Encrypt String with Lowercase Letters

Details:
  TestName: encryptLowercaseString
  Description: Test the encryption of a string containing lowercase letters to ensure they are properly handled.
Execution:
  Arrange: Prepare a string input with lowercase letters "hello"
  Act: Call Polybius.encrypt("hello")
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Confirm that lowercase letters are converted to uppercase before encryption and the result matches the encryption of an all-uppercase input. This test verifies the method's case-insensitivity.

Scenario 3: Encrypt String with Spaces

Details:
  TestName: encryptStringWithSpaces
  Description: Test the encryption of a string containing spaces to see how they are handled.
Execution:
  Arrange: Prepare a string input with spaces "HELLO WORLD"
  Act: Call Polybius.encrypt("HELLO WORLD")
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Verify how spaces are handled in the encryption process. This test helps understand the behavior of the method with multi-word inputs.

Scenario 4: Encrypt Empty String

Details:
  TestName: encryptEmptyString
  Description: Test the encryption of an empty string to ensure proper handling of edge cases.
Execution:
  Arrange: Prepare an empty string input ""
  Act: Call Polybius.encrypt("")
  Assert: Check if the returned string is empty
Validation:
  Confirm that the method correctly handles an empty input by returning an empty string. This test verifies the method's behavior with minimal input.

Scenario 5: Encrypt String with Special Characters

Details:
  TestName: encryptStringWithSpecialCharacters
  Description: Test the encryption of a string containing special characters to see how they are handled.
Execution:
  Arrange: Prepare a string input with special characters "HELLO! @WORLD#"
  Act: Call Polybius.encrypt("HELLO! @WORLD#")
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Observe how special characters are treated in the encryption process. This test helps understand the method's behavior with non-alphabetic characters.

Scenario 6: Encrypt Long String

Details:
  TestName: encryptLongString
  Description: Test the encryption of a long string to ensure the method can handle larger inputs.
Execution:
  Arrange: Prepare a long string input (e.g., 1000 characters)
  Act: Call Polybius.encrypt() with the long string
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Verify that the method can handle and correctly encrypt longer inputs without issues. This test ensures the method's performance and correctness for larger datasets.

Scenario 7: Encrypt String with Numbers

Details:
  TestName: encryptStringWithNumbers
  Description: Test the encryption of a string containing numbers to see how they are handled.
Execution:
  Arrange: Prepare a string input with numbers "HELLO123"
  Act: Call Polybius.encrypt("HELLO123")
  Assert: Check if the returned string matches the expected encrypted output
Validation:
  Observe how numeric characters are treated in the encryption process. This test helps understand the method's behavior with mixed alphanumeric input.
```

These test scenarios cover various aspects of the `encrypt` method, including basic functionality, case sensitivity, handling of spaces and special characters, edge cases like empty strings, and performance with longer inputs. They should provide a comprehensive test suite for the given method.
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class PolybiusEncryptTest {

	@ParameterizedTest
	@CsvSource({ "HELLO, 2315313134", "WORLD, 4234423114", "POLYBIUS, 3334314235243444" })
	@Tag("valid")
	void testEncryptSimpleString(String input, String expected) {
		assertEquals(expected, Polybius.encrypt(input));
	}

	@Test
	@Tag("valid")
	void testEncryptLowercaseString() {
		assertEquals("2315313134", Polybius.encrypt("hello"));
	}

	@Test
	@Tag("valid")
	void testEncryptStringWithSpaces() {
		assertEquals("2315313134 4234423114", Polybius.encrypt("HELLO WORLD"));
	}

	@Test
	@Tag("boundary")
	void testEncryptEmptyString() {
		assertEquals("", Polybius.encrypt(""));
	}

	@Test
	@Tag("valid")
	void testEncryptStringWithSpecialCharacters() {
		assertEquals("2315313134 4234423114", Polybius.encrypt("HELLO! @WORLD#"));
	}

	@Test
	@Tag("valid")
	void testEncryptLongString() {
		StringBuilder longInput = new StringBuilder();
		StringBuilder expectedOutput = new StringBuilder();
		for (int i = 0; i < 200; i++) {
			longInput.append("ABCDE");
			expectedOutput.append("0001020304");
		}
		assertEquals(expectedOutput.toString(), Polybius.encrypt(longInput.toString()));
	}

	@Test
	@Tag("valid")
	void testEncryptStringWithNumbers() {
		assertEquals("2315313134123", Polybius.encrypt("HELLO123"));
	}

	@Test
	@Tag("invalid")
	void testEncryptNullString() {
		assertThrows(NullPointerException.class, () -> Polybius.encrypt(null));
	}

	@Test
	@Tag("valid")
	void testEncryptStringWithUmlaut() {
		assertEquals("2315313134", Polybius.encrypt("HELLÃ–"));
	}

	@Test
	@Tag("boundary")
	void testEncryptSingleCharacter() {
		assertEquals("00", Polybius.encrypt("A"));
	}

}