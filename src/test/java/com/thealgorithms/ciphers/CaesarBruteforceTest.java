
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unitdemo using AI Type  and AI Model

ROOST_METHOD_HASH=bruteforce_f7f85352fc
ROOST_METHOD_SIG_HASH=bruteforce_6fe5851dbe

Based on the provided information, here are several test scenarios for the `bruteforce` method in the Caesar class:

```
Scenario 1: Test bruteforce with a simple encrypted message

Details:
  TestName: bruteforceSimpleMessage
  Description: Test the bruteforce method with a simple encrypted message to ensure it generates all possible decryptions.
Execution:
  Arrange: Create a Caesar object and an encrypted message.
  Act: Call the bruteforce method with the encrypted message.
  Assert: Check that the returned array has 27 elements and contains the original message.
Validation:
  Verify that the bruteforce method returns an array of 27 strings, each representing a possible decryption. One of these strings should match the original message, confirming that all shift possibilities are covered.

Scenario 2: Test bruteforce with an empty string

Details:
  TestName: bruteforceEmptyString
  Description: Verify the behavior of the bruteforce method when given an empty string as input.
Execution:
  Arrange: Create a Caesar object.
  Act: Call the bruteforce method with an empty string.
  Assert: Check that the returned array has 27 elements, all of which are empty strings.
Validation:
  Ensure that the method handles empty input correctly, returning an array of 27 empty strings without throwing any exceptions.

Scenario 3: Test bruteforce with non-alphabetic characters

Details:
  TestName: bruteforceNonAlphabeticChars
  Description: Test the bruteforce method with a message containing non-alphabetic characters to ensure they remain unchanged.
Execution:
  Arrange: Create a Caesar object and an encrypted message with numbers and special characters.
  Act: Call the bruteforce method with the encrypted message.
  Assert: Verify that all 27 returned strings contain the non-alphabetic characters in their original positions.
Validation:
  Confirm that the bruteforce method preserves non-alphabetic characters in all 27 possible decryptions, as these should not be affected by the Caesar cipher.

Scenario 4: Test bruteforce with mixed case message

Details:
  TestName: bruteforceMixedCaseMessage
  Description: Verify that the bruteforce method correctly handles a message with both uppercase and lowercase letters.
Execution:
  Arrange: Create a Caesar object and an encrypted message with mixed case letters.
  Act: Call the bruteforce method with the encrypted message.
  Assert: Check that the returned array contains strings where the case of letters is preserved in all 27 variations.
Validation:
  Ensure that the bruteforce method maintains the correct case for each letter in all possible decryptions, as the Caesar cipher should preserve letter case.

Scenario 5: Test bruteforce with maximum shift

Details:
  TestName: bruteforceMaximumShift
  Description: Test the bruteforce method with a message encrypted using the maximum shift (26) to ensure it's included in the results.
Execution:
  Arrange: Create a Caesar object, an original message, and encrypt it with a shift of 26.
  Act: Call the bruteforce method with the encrypted message.
  Assert: Verify that the last element of the returned array matches the original message.
Validation:
  Confirm that the bruteforce method correctly handles the edge case of maximum shift, which should result in the original message appearing as the last element in the returned array.

Scenario 6: Test bruteforce result consistency

Details:
  TestName: bruteforceResultConsistency
  Description: Verify that calling bruteforce multiple times with the same input produces consistent results.
Execution:
  Arrange: Create a Caesar object and an encrypted message.
  Act: Call the bruteforce method twice with the same encrypted message.
  Assert: Compare the two returned arrays to ensure they are identical.
Validation:
  Ensure that the bruteforce method produces consistent results for the same input, which is crucial for the reliability of the decryption process.
```

These test scenarios cover various aspects of the `bruteforce` method, including normal operation, edge cases, and potential error conditions. They aim to verify the method's correctness, consistency, and robustness in handling different types of input.
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;

class CaesarBruteforceTest {

	private Caesar caesar;

	@BeforeEach
	void setUp() {
		caesar = new Caesar();
	}

	@Test
	@Tag("valid")
	void bruteforceSimpleMessage() {
		String originalMessage = "HELLO";
		String encryptedMessage = caesar.encode(originalMessage, 3);
		String[] results = caesar.bruteforce(encryptedMessage);
		assertEquals(27, results.length);
		assertTrue(containsString(results, originalMessage));
	}

	@Test
	@Tag("boundary")
	void bruteforceEmptyString() {
		String[] results = caesar.bruteforce("");
		assertEquals(27, results.length);
		for (String result : results) {
			assertEquals("", result);
		}
	}

	@Test
	@Tag("valid")
	void bruteforceNonAlphabeticChars() {
		String encryptedMessage = "123!@#";
		String[] results = caesar.bruteforce(encryptedMessage);
		assertEquals(27, results.length);
		for (String result : results) {
			assertEquals(encryptedMessage, result);
		}
	}

	@Test
	@Tag("valid")
	void bruteforceMixedCaseMessage() {
		String originalMessage = "HeLLo WoRLd";
		String encryptedMessage = caesar.encode(originalMessage, 5);
		String[] results = caesar.bruteforce(encryptedMessage);
		assertEquals(27, results.length);
		assertTrue(containsString(results, originalMessage));
	}

	@Test
	@Tag("boundary")
	void bruteforceMaximumShift() {
		String originalMessage = "MAXIMUM SHIFT";
		String encryptedMessage = caesar.encode(originalMessage, 26);
		String[] results = caesar.bruteforce(encryptedMessage);
		assertEquals(27, results.length);
		assertEquals(originalMessage, results[26]);
	}

	@Test
	@Tag("valid")
	void bruteforceResultConsistency() {
		String encryptedMessage = "CONSISTENCY TEST";
		String[] results1 = caesar.bruteforce(encryptedMessage);
		String[] results2 = caesar.bruteforce(encryptedMessage);
		assertArrayEquals(results1, results2);
	}

	private boolean containsString(String[] array, String target) {
		for (String s : array) {
			if (s.equals(target)) {
				return true;
			}
		}
		return false;
	}

}