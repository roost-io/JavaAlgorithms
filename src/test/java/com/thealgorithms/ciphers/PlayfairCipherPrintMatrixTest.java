
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unitdemo using AI Type  and AI Model

ROOST_METHOD_HASH=printMatrix_5158cb4396
ROOST_METHOD_SIG_HASH=printMatrix_57e89e69ad

Based on the provided information and the `printMatrix()` method, here are some test scenarios for the PlayfairCipher class:

```
Scenario 1: Verify Matrix Output Format

Details:
  TestName: verifyMatrixOutputFormat
  Description: Check if the printMatrix method correctly formats and prints the 5x5 Playfair Cipher matrix.
Execution:
  Arrange: Create a PlayfairCipher instance with a known key that generates a predictable matrix.
  Act: Call the printMatrix method and capture the console output.
  Assert: Verify that the output matches the expected format of a 5x5 matrix with proper spacing and line breaks.
Validation:
  This test ensures that the matrix is printed in a readable and correct format, which is crucial for debugging and verifying the cipher's state. It confirms that the method adheres to the specified output structure.

Scenario 2: Validate Matrix Content

Details:
  TestName: validateMatrixContent
  Description: Ensure that the printMatrix method displays the correct characters in the matrix based on the initialized key.
Execution:
  Arrange: Initialize a PlayfairCipher with a specific key (e.g., "PLAYFAIR").
  Act: Call the printMatrix method and capture the console output.
  Assert: Check that the output contains all expected characters from the key and the remaining alphabet in the correct order.
Validation:
  This test verifies that the matrix generation logic works correctly and that the printMatrix method accurately reflects the internal state of the cipher. It's important for ensuring the integrity of the encryption/decryption process.

Scenario 3: Check for Absence of 'J' in Matrix

Details:
  TestName: checkAbsenceOfJ
  Description: Verify that the printed matrix does not contain the letter 'J', as per Playfair Cipher rules.
Execution:
  Arrange: Create a PlayfairCipher instance with any valid key.
  Act: Call the printMatrix method and capture the console output.
  Assert: Confirm that the output does not contain the letter 'J'.
Validation:
  This test ensures that the Playfair Cipher rule of excluding 'J' from the matrix is followed. It's crucial for maintaining the correct implementation of the cipher algorithm.

Scenario 4: Verify Matrix Size

Details:
  TestName: verifyMatrixSize
  Description: Ensure that the printed matrix always has exactly 25 characters (5x5 grid).
Execution:
  Arrange: Initialize a PlayfairCipher with any valid key.
  Act: Call the printMatrix method and capture the console output.
  Assert: Count the number of printed characters (excluding spaces and newlines) and verify it's exactly 25.
Validation:
  This test confirms that the matrix maintains the correct size regardless of the input key. It's essential for the proper functioning of the Playfair Cipher algorithm.

Scenario 5: Check Matrix Uniqueness

Details:
  TestName: checkMatrixUniqueness
  Description: Verify that each character in the printed matrix is unique.
Execution:
  Arrange: Create a PlayfairCipher instance with a key that potentially includes repeated characters.
  Act: Call the printMatrix method and capture the console output.
  Assert: Extract all characters from the output and ensure there are no duplicates.
Validation:
  This test ensures that the matrix generation process correctly eliminates duplicates, which is a key requirement for the Playfair Cipher to function properly. It validates the integrity of the cipher's core data structure.
```

These test scenarios cover various aspects of the `printMatrix()` method, including its output format, content correctness, adherence to Playfair Cipher rules, and the integrity of the matrix generation process. They focus on the visible output of the method and its implications for the overall cipher implementation.
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.*;

class PlayfairCipherPrintMatrixTest {

	private PlayfairCipher playfairCipher;

	private ByteArrayOutputStream outputStreamCaptor;

	@BeforeEach
	void setUp() {
		outputStreamCaptor = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outputStreamCaptor));
	}

	@Test
	@Tag("valid")
	void verifyMatrixOutputFormat() {
		playfairCipher = new PlayfairCipher("PLAYFAIR");
		playfairCipher.printMatrix();
		String output = outputStreamCaptor.toString().trim();

		assertThat(output).startsWith("\nPlayfair Cipher Matrix:");
		assertThat(output.split("\n")).hasSize(6); // Header + 5 rows
		assertThat(output.split("\n")[1].split(" ")).hasSize(5); // 5 columns
	}

	@Test
	@Tag("valid")
	void validateMatrixContent() {
		playfairCipher = new PlayfairCipher("PLAYFAIR");
		playfairCipher.printMatrix();
		String output = outputStreamCaptor.toString().trim();

		assertThat(output).contains("P", "L", "A", "Y", "F", "I", "R");
		assertThat(output).doesNotContain("J");
	}

	@Test
	@Tag("valid")
	void checkAbsenceOfJ() {
		playfairCipher = new PlayfairCipher("JAVATEST");
		playfairCipher.printMatrix();
		String output = outputStreamCaptor.toString().trim();

		assertThat(output).doesNotContain("J");
	}

	@Test
	@Tag("valid")
	void verifyMatrixSize() {
		playfairCipher = new PlayfairCipher("CRYPTOGRAPHY");
		playfairCipher.printMatrix();
		String output = outputStreamCaptor.toString();

		long characterCount = output.chars().filter(ch -> ch >= 'A' && ch <= 'Z').count();
		assertThat(characterCount).isEqualTo(25);
	}

	@Test
	@Tag("valid")
	void checkMatrixUniqueness() {
		playfairCipher = new PlayfairCipher("HELLO");
		playfairCipher.printMatrix();
		String output = outputStreamCaptor.toString();

		String characters = output.replaceAll("[^A-Z]", "");
		assertThat(characters).hasSize(25);
		assertThat(characters).doesNotHaveDuplicates();
	}

}