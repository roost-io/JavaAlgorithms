
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unitdemo using AI Type  and AI Model

ROOST_METHOD_HASH=setKey_d96a8cd7ea
ROOST_METHOD_SIG_HASH=setKey_e778e9c639

Based on the provided information and the setKey method, here are several test scenarios:

Scenario 1: Set Valid 64-Character Binary String Key

Details:
  TestName: validKeySet
  Description: Test that a valid 64-character binary string key is correctly set.
Execution:
  Arrange: Create a DES instance.
  Act: Call setKey with a valid 64-character binary string.
  Assert: Verify that getKey returns the same key that was set.
Validation:
  This test ensures that the setKey method correctly sets a valid key. It's crucial for the basic functionality of the DES class.

Scenario 2: Attempt to Set Invalid Key (Not 64 Characters)

Details:
  TestName: invalidKeyLengthThrowsException
  Description: Test that an IllegalArgumentException is thrown when trying to set a key that is not 64 characters long.
Execution:
  Arrange: Create a DES instance.
  Act: Call setKey with a binary string that is not 64 characters long.
  Assert: Verify that an IllegalArgumentException is thrown.
Validation:
  This test checks the error handling of the setKey method, ensuring it rejects keys of incorrect length as per the sanitize method's requirements.

Scenario 3: Attempt to Set Non-Binary String Key

Details:
  TestName: nonBinaryKeyThrowsException
  Description: Test that an IllegalArgumentException is thrown when trying to set a key that contains non-binary characters.
Execution:
  Arrange: Create a DES instance.
  Act: Call setKey with a 64-character string that includes non-binary characters.
  Assert: Verify that an IllegalArgumentException is thrown.
Validation:
  This test ensures that the setKey method, through the sanitize method, rejects keys that contain non-binary characters, maintaining the integrity of the DES algorithm.

Scenario 4: Set Key Multiple Times

Details:
  TestName: setKeyMultipleTimes
  Description: Test that the key can be changed multiple times without issues.
Execution:
  Arrange: Create a DES instance.
  Act: Call setKey with a valid key, then call it again with a different valid key.
  Assert: Verify that getKey returns the most recently set key.
Validation:
  This test checks that the setKey method allows for key changes, which is important for scenarios where key rotation might be necessary.

Scenario 5: Set Key with Leading Zeros

Details:
  TestName: setKeyWithLeadingZeros
  Description: Test that a valid key with leading zeros is correctly set.
Execution:
  Arrange: Create a DES instance.
  Act: Call setKey with a valid 64-character binary string that starts with several zeros.
  Assert: Verify that getKey returns the exact same key, preserving the leading zeros.
Validation:
  This test ensures that the setKey method correctly handles and preserves leading zeros in the key, which is important for maintaining the full 64-bit key length required by DES.

These scenarios cover the main functionality of the setKey method, including valid inputs, error cases, and edge cases, based on the information provided about the DES class and its methods.
*/

// ********RoostGPT********

package com.thealgorithms.ciphers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class DesSetKeyTest {

	private DES des;

	@BeforeEach
	void setUp() {
		des = new DES("0000000000000000000000000000000000000000000000000000000000000000");
	}

	@Test
	@Tag("valid")
	void validKeySet() {
		String validKey = "1010101010101010101010101010101010101010101010101010101010101010";
		des.setKey(validKey);
		assertEquals(validKey, des.getKey());
	}

	@Test
	@Tag("invalid")
	void invalidKeyLengthThrowsException() {
		String invalidKey = "101010101010101010101010101010101010101010101010101010101010101";
		assertThrows(IllegalArgumentException.class, () -> des.setKey(invalidKey));
	}

	@Test
	@Tag("invalid")
	void nonBinaryKeyThrowsException() {
		String nonBinaryKey = "10101010101010101010101010101010101010101010101010101010101010AB";
		assertThrows(IllegalArgumentException.class, () -> des.setKey(nonBinaryKey));
	}

	@Test
	@Tag("valid")
	void setKeyMultipleTimes() {
		String firstKey = "1010101010101010101010101010101010101010101010101010101010101010";
		String secondKey = "0101010101010101010101010101010101010101010101010101010101010101";

		des.setKey(firstKey);
		assertEquals(firstKey, des.getKey());

		des.setKey(secondKey);
		assertEquals(secondKey, des.getKey());
	}

	@Test
	@Tag("boundary")
	void setKeyWithLeadingZeros() {
		String keyWithLeadingZeros = "0000000010101010101010101010101010101010101010101010101010101010";
		des.setKey(keyWithLeadingZeros);
		assertEquals(keyWithLeadingZeros, des.getKey());
	}

}