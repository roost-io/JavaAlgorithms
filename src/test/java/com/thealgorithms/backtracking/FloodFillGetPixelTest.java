// ********RoostGPT********
/*
Test generated by RoostGPT for test testmenow using AI Type  and AI Model 

ROOST_METHOD_HASH=getPixel_05c9f6ca49
ROOST_METHOD_SIG_HASH=getPixel_32782947c7

Here are the test scenarios for the `getPixel` method:

**Scenario 1: Valid Pixel Retrieval**

Details:
TestName: getPixelFromValidCoordinates
Description: This test checks if the `getPixel` method returns the correct color value when given valid coordinates within the image boundaries.

Execution:
Arrange: Create a 2D image array with a size of 3x3, initialized with different color values.
Act: Call the `getPixel` method with coordinates (1, 1).
Assert: Use `assertEquals` to verify that the returned color value matches the expected value.

Validation:
This test verifies that the `getPixel` method correctly retrieves the color value at the specified coordinates. It ensures that the method functions as expected when given valid input.

**Scenario 2: Out-of-Bounds X Coordinate**

Details:
TestName: getPixelWithOutOfBoundsXCoordinate
Description: This test checks if the `getPixel` method throws an `ArrayIndexOutOfBoundsException` when given an x-coordinate that exceeds the image width.

Execution:
Arrange: Create a 2D image array with a size of 3x3.
Act: Call the `getPixel` method with coordinates (3, 1).
Assert: Use `assertThrows` to verify that an `ArrayIndexOutOfBoundsException` is thrown.

Validation:
This test verifies that the `getPixel` method correctly handles out-of-bounds x-coordinates by throwing an exception.

**Scenario 3: Out-of-Bounds Y Coordinate**

Details:
TestName: getPixelWithOutOfBoundsYCoordinate
Description: This test checks if the `getPixel` method throws an `ArrayIndexOutOfBoundsException` when given a y-coordinate that exceeds the image height.

Execution:
Arrange: Create a 2D image array with a size of 3x3.
Act: Call the `getPixel` method with coordinates (1, 3).
Assert: Use `assertThrows` to verify that an `ArrayIndexOutOfBoundsException` is thrown.

Validation:
This test verifies that the `getPixel` method correctly handles out-of-bounds y-coordinates by throwing an exception.

**Scenario 4: Negative X Coordinate**

Details:
TestName: getPixelWithNegativeXCoordinate
Description: This test checks if the `getPixel` method throws an `ArrayIndexOutOfBoundsException` when given a negative x-coordinate.

Execution:
Arrange: Create a 2D image array with a size of 3x3.
Act: Call the `getPixel` method with coordinates (-1, 1).
Assert: Use `assertThrows` to verify that an `ArrayIndexOutOfBoundsException` is thrown.

Validation:
This test verifies that the `getPixel` method correctly handles negative x-coordinates by throwing an exception.

**Scenario 5: Negative Y Coordinate**

Details:
TestName: getPixelWithNegativeYCoordinate
Description: This test checks if the `getPixel` method throws an `ArrayIndexOutOfBoundsException` when given a negative y-coordinate.

Execution:
Arrange: Create a 2D image array with a size of 3x3.
Act: Call the `getPixel` method with coordinates (1, -1).
Assert: Use `assertThrows` to verify that an `ArrayIndexOutOfBoundsException` is thrown.

Validation:
This test verifies that the `getPixel` method correctly handles negative y-coordinates by throwing an exception.

**Scenario 6: Null Image**

Details:
TestName: getPixelWithNullImage
Description: This test checks if the `getPixel` method throws a `NullPointerException` when given a null image.

Execution:
Arrange: Set the image to null.
Act: Call the `getPixel` method with coordinates (1, 1).
Assert: Use `assertThrows` to verify that a `NullPointerException` is thrown.

Validation:
This test verifies that the `getPixel` method correctly handles null images by throwing an exception.

These test scenarios cover various edge cases and error handling for the `getPixel` method, ensuring that it behaves as expected under different conditions.
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class FloodFillGetPixelTest {
    @Test
    @Tag("valid")
    public void getPixelFromValidCoordinates() {
        // Arrange
        int[][] image = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        // Act
        int color = FloodFill.getPixel(image, 1, 1);
        // Assert
        assertEquals(5, color);
    }
    @Test
    @Tag("invalid")
    public void getPixelWithOutOfBoundsXCoordinate() {
        // Arrange
        int[][] image = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        // Act and Assert
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> FloodFill.getPixel(image, 3, 1));
    }
    @Test
    @Tag("invalid")
    public void getPixelWithOutOfBoundsYCoordinate() {
        // Arrange
        int[][] image = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        // Act and Assert
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> FloodFill.getPixel(image, 1, 3));
    }
    @Test
    @Tag("invalid")
    public void getPixelWithNegativeXCoordinate() {
        // Arrange
        int[][] image = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        // Act and Assert
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> FloodFill.getPixel(image, -1, 1));
    }
    @Test
    @Tag("invalid")
    public void getPixelWithNegativeYCoordinate() {
        // Arrange
        int[][] image = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        // Act and Assert
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> FloodFill.getPixel(image, 1, -1));
    }
    @Test
    @Tag("invalid")
    public void getPixelWithNullImage() {
        // Arrange
        int[][] image = null;
        // Act and Assert
        assertThrows(NullPointerException.class, () -> FloodFill.getPixel(image, 1, 1));
    }
}