

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=generateParentheses_7e003e6264
ROOST_METHOD_SIG_HASH=generateParentheses_32b8e9c402

"""
  Scenario 1: Test with a Positive Integer Input

  Details:  
    TestName: testWithPositiveIntegerInput.
    Description: This test is designed to check if the method generateParentheses generates the correct number of valid combinations of parentheses for a given positive integer input.
  Execution:
    Arrange: No arrangement needed as there are no dependencies.
    Act: Invoke the generateParentheses method with a positive integer (for instance, 3).
    Assert: Use JUnit assertions to compare the actual result against the expected number of combinations (5 combinations for 3 pairs: "((()))", "(()())", "(())()", "()(())", "()()()").
  Validation: 
    The assertion verifies that the method correctly generates all valid combinations of parentheses for a given positive integer. This is important for ensuring the correctness of the method's core functionality.

  Scenario 2: Test with Zero as Input

  Details:  
    TestName: testWithZeroInput.
    Description: This test is designed to check if the method generateParentheses returns an empty list when the input is zero.
  Execution:
    Arrange: No arrangement needed as there are no dependencies.
    Act: Invoke the generateParentheses method with 0 as an input.
    Assert: Use JUnit assertions to check that the returned list is empty.
  Validation: 
    The assertion verifies that the method correctly handles the edge case where the input is zero, returning an empty list. This is significant as it reflects the correct behavior of the method in this specific scenario.

  Scenario 3: Test with Negative Integer Input

  Details:  
    TestName: testWithNegativeIntegerInput.
    Description: This test is designed to confirm if the method generateParentheses throws an IllegalArgumentException when the input is a negative integer.
  Execution:
    Arrange: No arrangement needed as there are no dependencies.
    Act: Invoke the generateParentheses method with a negative integer (for instance, -2).
    Assert: Use JUnit assertions to expect an IllegalArgumentException.
  Validation: 
    The assertion verifies that the method correctly throws an IllegalArgumentException when the input is negative. This is important for ensuring the method's robustness and error handling.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.*;

public class ParenthesesGeneratorGenerateParenthesesTest {
    @Test
    @Tag("valid")
    public void testWithPositiveIntegerInput() {
        List<String> expected = Arrays.asList("((()))", "(()())", "(())()", "()(())", "()()()");
        List<String> actual = ParenthesesGenerator.generateParentheses(3);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("boundary")
    public void testWithZeroInput() {
        List<String> expected = new ArrayList<>();
        List<String> actual = ParenthesesGenerator.generateParentheses(0);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("invalid")
    public void testWithNegativeIntegerInput() {
        assertThrows(IllegalArgumentException.class, () -> ParenthesesGenerator.generateParentheses(-2));
    }
}