

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=generateAll_c000f2c603
ROOST_METHOD_SIG_HASH=generateAll_f053ae9152

"""
Scenario 1: Testing generateAll method with an empty list
Details:  
  TestName: testGenerateAllWithEmptyList
  Description: This test will check the functionality of the generateAll method when the input sequence is an empty list. 
Execution:
  Arrange: Create an empty list of any type.
  Act: Call the generateAll method with the empty list as a parameter.
  Assert: Assert that the returned list contains only one element which is an empty list.
Validation: 
  The assertion verifies that the generateAll method correctly handles the edge case of an empty input list by returning a list containing an empty list. This is significant as it ensures the method can handle edge cases without throwing any exceptions.

Scenario 2: Testing generateAll method with a list of integers
Details:  
  TestName: testGenerateAllWithIntegerList
  Description: This test is designed to check the functionality of the generateAll method when the input sequence is a list of integers. 
Execution:
  Arrange: Create a list of integers.
  Act: Call the generateAll method with the integer list as a parameter.
  Assert: Assert that the returned list contains all possible subsequences of the input list.
Validation: 
  The assertion verifies that the generateAll method correctly generates all subsequences of the input list. This is significant as it tests the core functionality of the method.

Scenario 3: Testing generateAll method with a list of strings
Details:  
  TestName: testGenerateAllWithStringList
  Description: This test is designed to verify the functionality of the generateAll method when the input sequence is a list of strings. 
Execution:
  Arrange: Create a list of strings.
  Act: Call the generateAll method with the string list as a parameter.
  Assert: Assert that the returned list contains all possible subsequences of the input list.
Validation: 
  The assertion verifies that the generateAll method correctly generates all subsequences of the input list. This test is important as it ensures that the method works correctly for different types of input lists.

Scenario 4: Testing generateAll method with a large list
Details:  
  TestName: testGenerateAllWithLargeList
  Description: This test is designed to check the performance and correctness of the generateAll method when the input sequence is a large list. 
Execution:
  Arrange: Create a large list of integers.
  Act: Call the generateAll method with the large list as a parameter.
  Assert: Assert that the returned list contains all possible subsequences of the input list and the method completes within a reasonable time frame.
Validation: 
  The assertion verifies that the generateAll method correctly handles large input lists and performs within a reasonable time. This is significant as it tests the method's efficiency and scalability.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.jupiter.api.*;
import java.util.ArrayList;

public class SubsequenceFinderGenerateAllTest {
    @Test
    @Tag("valid")
    public void testGenerateAllWithEmptyList() {
        List<Integer> sequence = Collections.emptyList();
        List<List<Integer>> allSubsequences = SubsequenceFinder.generateAll(sequence);
        assertEquals(1, allSubsequences.size());
        assertTrue(allSubsequences.get(0).isEmpty());
    }
    @Test
    @Tag("valid")
    public void testGenerateAllWithIntegerList() {
        List<Integer> sequence = Arrays.asList(1, 2, 3);
        List<List<Integer>> allSubsequences = SubsequenceFinder.generateAll(sequence);
        List<List<Integer>> expectedSubsequences = Arrays.asList(
                Arrays.asList(),
                Arrays.asList(3),
                Arrays.asList(2),
                Arrays.asList(2, 3),
                Arrays.asList(1),
                Arrays.asList(1, 3),
                Arrays.asList(1, 2),
                Arrays.asList(1, 2, 3)
        );
        assertEquals(expectedSubsequences.size(), allSubsequences.size());
        assertTrue(allSubsequences.containsAll(expectedSubsequences));
    }
    @Test
    @Tag("valid")
    public void testGenerateAllWithStringList() {
        List<String> sequence = Arrays.asList("a", "b", "c");
        List<List<String>> allSubsequences = SubsequenceFinder.generateAll(sequence);
        List<List<String>> expectedSubsequences = Arrays.asList(
                Arrays.asList(),
                Arrays.asList("c"),
                Arrays.asList("b"),
                Arrays.asList("b", "c"),
                Arrays.asList("a"),
                Arrays.asList("a", "c"),
                Arrays.asList("a", "b"),
                Arrays.asList("a", "b", "c")
        );
        assertEquals(expectedSubsequences.size(), allSubsequences.size());
        assertTrue(allSubsequences.containsAll(expectedSubsequences));
    }
    @Test
    @Tag("boundary")
    public void testGenerateAllWithLargeList() {
        List<Integer> sequence = Stream.iterate(0, n -> n + 1).limit(20).collect(Collectors.toList());
        List<List<Integer>> allSubsequences = SubsequenceFinder.generateAll(sequence);
        assertEquals((int) Math.pow(2, sequence.size()), allSubsequences.size());
    }
}