

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=exist_13fb87d8d8
ROOST_METHOD_SIG_HASH=exist_7bc1546c93

"""
Scenario 1: Word exists in the provided board

Details:
  TestName: testWordExistsInBoard
  Description: This test is meant to check if a given word exists in the provided board. The word is expected to be found in the board, hence the method should return true.
Execution:
  Arrange: Create a 2D character array board and a word that exists in the board.
  Act: Invoke the exist method with the created board and word.
  Assert: Assert that the returned value is true.
Validation: 
  The assertion verifies if the provided word exists in the given board. The expected result is true because the word is present in the board. This test validates that the exist method correctly identifies a word in the board.

Scenario 2: Word does not exist in the board

Details:
  TestName: testWordDoesNotExistInBoard
  Description: This test is meant to check if a given word does not exist in the provided board. The word is not expected to be found in the board, hence the method should return false.
Execution:
  Arrange: Create a 2D character array board and a word that does not exist in the board.
  Act: Invoke the exist method with the created board and word.
  Assert: Assert that the returned value is false.
Validation: 
  The assertion verifies if the provided word does not exist in the given board. The expected result is false because the word is not present in the board. This test validates that the exist method correctly identifies when a word is not in the board.

Scenario 3: Board is empty

Details:
  TestName: testEmptyBoard
  Description: This test is meant to check the behavior of the method when the provided board is empty. In this case, the method should return false, regardless of the provided word.
Execution:
  Arrange: Create an empty 2D character array board and any word.
  Act: Invoke the exist method with the empty board and word.
  Assert: Assert that the returned value is false.
Validation: 
  The assertion verifies that the method correctly handles the case when the board is empty. The expected result is false because there are no characters in the board for the word to exist. This test validates the error handling capabilities of the exist method.

Scenario 4: Word is empty

Details:
  TestName: testEmptyWord
  Description: This test is meant to check the behavior of the method when the provided word is empty. In this case, the method should return false, regardless of the provided board.
Execution:
  Arrange: Create any 2D character array board and an empty word.
  Act: Invoke the exist method with the board and empty word.
  Assert: Assert that the returned value is false.
Validation: 
  The assertion verifies if the method correctly handles the case when the word is empty. The expected result is false because an empty word cannot exist in the board. This test validates the error handling capabilities of the exist method.
"""
*/

// ********RoostGPT********

package com.thealgorithms.backtracking;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class WordSearchExistTest {
    @Test
    @Tag("valid")
    public void testWordExistsInBoard() {
        WordSearch wordSearch = new WordSearch();
        char[][] board = {
            {'A', 'B', 'C', 'E'},
            {'S', 'F', 'C', 'S'},
            {'A', 'D', 'E', 'E'}
        };
        String word = "ABCCED";
        assertTrue(wordSearch.exist(board, word));
    }
    @Test
    @Tag("invalid")
    public void testWordDoesNotExistInBoard() {
        WordSearch wordSearch = new WordSearch();
        char[][] board = {
            {'A', 'B', 'C', 'E'},
            {'S', 'F', 'C', 'S'},
            {'A', 'D', 'E', 'E'}
        };
        String word = "ABCB";
        assertFalse(wordSearch.exist(board, word));
    }
    @Test
    @Tag("boundary")
    public void testEmptyBoard() {
        WordSearch wordSearch = new WordSearch();
        char[][] board = new char[0][0];
        String word = "ABCB";
        assertFalse(wordSearch.exist(board, word));
    }
    @Test
    @Tag("boundary")
    public void testEmptyWord() {
        WordSearch wordSearch = new WordSearch();
        char[][] board = {
            {'A', 'B', 'C', 'E'},
            {'S', 'F', 'C', 'S'},
            {'A', 'D', 'E', 'E'}
        };
        String word = "";
        assertFalse(wordSearch.exist(board, word));
    }
}