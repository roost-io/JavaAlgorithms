

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=findNonRepeatingNumber_8b3b5ba7c8
ROOST_METHOD_SIG_HASH=findNonRepeatingNumber_825a284e43

Scenario 1: Test with an array containing non-repeated numbers
Details:  
  TestName: testWithNonRepeatedNumbers
  Description: This test is designed to check if the method can accurately find the non-repeated number in an array of integers.
  Execution:
    Arrange: Create an array of integers with one non-repeated number. 
    Act: Invoke the findNonRepeatingNumber method with the created array.
    Assert: Compare the returned result with the expected non-repeated number.
  Validation: 
    The assertion verifies that the method can accurately find the non-repeated number in an array of integers. This is important as it ensures that the method can handle normal input correctly.

Scenario 2: Test with an array containing all repeated numbers
Details:  
  TestName: testWithAllRepeatedNumbers
  Description: This test is designed to check how the method handles an array where all numbers are repeated.
  Execution:
    Arrange: Create an array of integers where all numbers are repeated. 
    Act: Invoke the findNonRepeatingNumber method with the created array.
    Assert: Compare the returned result with zero, as there are no non-repeated numbers.
  Validation: 
    The assertion verifies that the method correctly returns zero when there are no non-repeated numbers in the array. This is important as it ensures that the method can handle edge cases correctly.

Scenario 3: Test with an empty array
Details:  
  TestName: testWithEmptyArray
  Description: This test is designed to check how the method handles an empty array.
  Execution:
    Arrange: Create an empty array of integers.
    Act: Invoke the findNonRepeatingNumber method with the created array.
    Assert: Compare the returned result with zero, as there are no numbers in the array.
  Validation: 
    The assertion verifies that the method correctly returns zero when the array is empty. This is important as it ensures that the method can handle edge cases correctly.

Scenario 4: Test with a null array
Details:  
  TestName: testWithNullArray
  Description: This test is designed to check how the method handles a null array.
  Execution:
    Arrange: Pass a null value as the array. 
    Act: Invoke the findNonRepeatingNumber method with null.
    Assert: Expect a NullPointerException to be thrown.
  Validation: 
    The assertion verifies that the method correctly throws a NullPointerException when the array is null. This is important as it ensures that the method can handle error cases correctly.
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;

public class NonRepeatingNumberFinderFindNonRepeatingNumberTest {
    @Test
    @Tag("valid")
    public void testWithNonRepeatedNumbers() {
        int[] arr = {1, 2, 3, 2, 1};
        int expected = 3;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("boundary")
    public void testWithAllRepeatedNumbers() {
        int[] arr = {1, 2, 2, 1};
        int expected = 0;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("boundary")
    public void testWithEmptyArray() {
        int[] arr = {};
        int expected = 0;
        int actual = NonRepeatingNumberFinder.findNonRepeatingNumber(arr);
        assertEquals(expected, actual);
    }
    @Test
    @Tag("invalid")
    public void testWithNullArray() {
        assertThrows(NullPointerException.class, () -> NonRepeatingNumberFinder.findNonRepeatingNumber(null));
    }
}