
// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=clearBit_2bb8df5689
ROOST_METHOD_SIG_HASH=clearBit_41db29e3ee

"""
Scenario 1: Clear Bit from a number at a specified position

Details:  
  TestName: testClearBitAtSpecificPosition
  Description: This test is meant to check if the clearBit method successfully clears the bit from the specified position in the number. 
  Execution:
    Arrange: Initialize a number and a bit position.
    Act: Invoke the clearBit method with the number and the bit position.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation: 
    The assertion aims to verify if the bit at the specified position in the number has been successfully cleared by the clearBit method. The expected result is the number with the bit at the specified position cleared. This test is significant in validating the functionality of the clearBit method.

Scenario 2: Clear Bit from a number at a position that exceeds Integer size

Details:  
  TestName: testClearBitAtPositionExceedingIntegerSize
  Description: This test is meant to check if the clearBit method handles the scenario where the bit position exceeds the size of an integer. 
  Execution:
    Arrange: Initialize a number and a bit position that exceeds the size of an integer.
    Act: Invoke the clearBit method with the number and the bit position.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation: 
    The assertion aims to verify if the clearBit method handles the exception when the bit position exceeds the size of an integer. The expected result is an exception. This test is significant in validating the error handling capability of the clearBit method.

Scenario 3: Clear Bit from a negative number at a specified position

Details:  
  TestName: testClearBitFromNegativeNumber
  Description: This test is meant to check if the clearBit method successfully clears the bit from the specified position in a negative number. 
  Execution:
    Arrange: Initialize a negative number and a bit position.
    Act: Invoke the clearBit method with the negative number and the bit position.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation: 
    The assertion aims to verify if the bit at the specified position in a negative number has been successfully cleared by the clearBit method. The expected result is the negative number with the bit at the specified position cleared. This test is significant in validating the functionality of the clearBit method with negative numbers.

Scenario 4: Clear Bit from zero at any position

Details:  
  TestName: testClearBitFromZero
  Description: This test is meant to check if the clearBit method handles the scenario where the number is zero. 
  Execution:
    Arrange: Initialize a number as zero and any bit position.
    Act: Invoke the clearBit method with the number and the bit position.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation: 
    The assertion aims to verify if the clearBit method handles the scenario where the number is zero. The expected result is zero. This test is significant in validating the functionality of the clearBit method with zero.

Scenario 5: Clear Bit at negative position from a number

Details:  
  TestName: testClearBitAtNegativePosition
  Description: This test is meant to check if the clearBit method handles the scenario where the bit position is negative. 
  Execution:
    Arrange: Initialize a number and a negative bit position.
    Act: Invoke the clearBit method with the number and the bit position.
    Assert: Use JUnit assertions to compare the actual result against the expected outcome.
  Validation: 
    The assertion aims to verify if the clearBit method handles the exception when the bit position is negative. The expected result is an exception. This test is significant in validating the error handling capability of the clearBit method.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;

public class SingleBitOperationsClearBitTest {
    @Tag("valid")
    @Test
    public void testClearBitAtSpecificPosition() {
        int num = 10; // 1010 in binary
        int bit = 1; // bit at position 1 is 1
        int expected = 8; // 1000 in binary
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
    @Tag("boundary")
    @Test
    public void testClearBitAtPositionExceedingIntegerSize() {
        int num = 10;
        int bit = 32; // exceeds size of integer
        assertThrows(ArithmeticException.class, () -> SingleBitOperations.clearBit(num, bit));
    }
    @Tag("valid")
    @Test
    public void testClearBitFromNegativeNumber() {
        int num = -10; // 10110 in binary (2's complement)
        int bit = 2; // bit at position 2 is 1
        int expected = -14; // 11100 in binary (2's complement)
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
    @Tag("valid")
    @Test
    public void testClearBitFromZero() {
        int num = 0;
        int bit = 1;
        int expected = 0;
        assertEquals(expected, SingleBitOperations.clearBit(num, bit));
    }
    @Tag("boundary")
    @Test
    public void testClearBitAtNegativePosition() {
        int num = 10;
        int bit = -1; // negative position
        assertThrows(ArithmeticException.class, () -> SingleBitOperations.clearBit(num, bit));
    }
}