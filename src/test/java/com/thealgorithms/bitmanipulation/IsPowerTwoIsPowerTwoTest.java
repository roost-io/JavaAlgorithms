

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=isPowerTwo_980368b636
ROOST_METHOD_SIG_HASH=isPowerTwo_1211820d58

"""
Scenario 1: Validate isPowerTwo when passed a power of two
TestName: validateIsPowerOfTwoWithPowerOfTwo
Description: This test is meant to check the isPowerTwo method by passing an input number which is a power of two. 
Execution:
  Arrange: No arrangement is required as our test input is a hardcoded number.
  Act: Invoke isPowerTwo method with the input number 4.
  Assert: Use JUnit assertions to confirm that the returned result is true.
Validation: 
  The assertion verifies that the method correctly identifies a power of two. The expected result is true because 4 is a power of two. This test validates that the method works correctly for positive scenarios.

Scenario 2: Validate isPowerTwo when passed a non-power of two
TestName: validateIsPowerOfTwoWithNonPowerOfTwo
Description: This test is meant to check the isPowerTwo method by passing an input number which is not a power of two.
Execution:
  Arrange: No arrangement is required as our test input is a hardcoded number.
  Act: Invoke isPowerTwo method with the input number 7.
  Assert: Use JUnit assertions to confirm that the returned result is false.
Validation: 
  The assertion verifies that the method correctly identifies a non-power of two. The expected result is false because 7 is not a power of two. This test validates that the method works correctly for negative scenarios.

Scenario 3: Validate isPowerTwo when passed zero
TestName: validateIsPowerOfTwoWithZero
Description: This test is meant to check the isPowerTwo method by passing zero as an input.
Execution:
  Arrange: No arrangement is required as our test input is a hardcoded number.
  Act: Invoke isPowerTwo method with the input number 0.
  Assert: Use JUnit assertions to confirm that the returned result is false.
Validation: 
  The assertion verifies that the method correctly identifies zero as not a power of two. The expected result is false because zero is not a power of two. This test validates that the method handles edge cases correctly.

Scenario 4: Validate isPowerTwo when passed a negative number
TestName: validateIsPowerOfTwoWithNegativeNumber
Description: This test is meant to check the isPowerTwo method by passing a negative number as an input.
Execution:
  Arrange: No arrangement is required as our test input is a hardcoded number.
  Act: Invoke isPowerTwo method with the input number -2.
  Assert: Use JUnit assertions to confirm that the returned result is false.
Validation: 
  The assertion verifies that the method correctly identifies negative numbers as not a power of two. The expected result is false because negative numbers cannot be a power of two. This test validates that the method handles error scenarios correctly.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class IsPowerTwoIsPowerTwoTest {
    @Test
    @Tag("valid")
    public void validateIsPowerOfTwoWithPowerOfTwo() {
        // Act
        boolean result = IsPowerTwo.isPowerTwo(4);
        // Assert
        assertEquals(true, result);
    }
    @Test
    @Tag("invalid")
    public void validateIsPowerOfTwoWithNonPowerOfTwo() {
        // Act
        boolean result = IsPowerTwo.isPowerTwo(7);
        // Assert
        assertEquals(false, result);
    }
    @Test
    @Tag("boundary")
    public void validateIsPowerOfTwoWithZero() {
        // Act
        boolean result = IsPowerTwo.isPowerTwo(0);
        // Assert
        assertEquals(false, result);
    }
    @Test
    @Tag("invalid")
    public void validateIsPowerOfTwoWithNegativeNumber() {
        // Act
        boolean result = IsPowerTwo.isPowerTwo(-2);
        // Assert
        assertEquals(false, result);
    }
}