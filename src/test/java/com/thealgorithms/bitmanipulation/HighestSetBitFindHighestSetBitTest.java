

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=findHighestSetBit_f85452e43d
ROOST_METHOD_SIG_HASH=findHighestSetBit_22fe20f4f8

"""
Scenario 1: Positive Number Test
Details:  
  TestName: testPositiveNumber.
  Description: This test is meant to check the functionality of the 'findHighestSetBit' method when a positive number is passed as an argument. 
Execution:
  Arrange: No setup is required as we are passing a static positive number as an argument.
  Act: Invoke the 'findHighestSetBit' method with a positive number.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome. 
Validation: 
  The assertion aims to verify that the method correctly returns the position of the highest set bit in the binary representation of the provided positive number. The expected result is based on the binary representation of the input number.

Scenario 2: Negative Number Test
Details:  
  TestName: testNegativeNumber.
  Description: This test is meant to check the exception handling of the 'findHighestSetBit' method when a negative number is passed as an argument. 
Execution:
  Arrange: No setup is required as we are passing a static negative number as an argument.
  Act: Invoke the 'findHighestSetBit' method with a negative number.
  Assert: Use JUnit assertions to check if an IllegalArgumentException is thrown. 
Validation: 
  The assertion aims to verify that the method correctly throws an IllegalArgumentException when a negative number is passed. This is expected as the method is not designed to handle negative inputs.

Scenario 3: Zero Test
Details:  
  TestName: testZeroNumber.
  Description: This test is meant to check the functionality of the 'findHighestSetBit' method when zero is passed as an argument. 
Execution:
  Arrange: No setup is required as we are passing zero as an argument.
  Act: Invoke the 'findHighestSetBit' method with zero.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome. 
Validation: 
  The assertion aims to verify that the method correctly returns an empty Optional when zero is passed. This is expected as zero in binary representation doesn't have any set bits.

Scenario 4: Large Number Test
Details:  
  TestName: testLargeNumber.
  Description: This test is meant to check the performance and correctness of the 'findHighestSetBit' method when a very large number is passed as an argument. 
Execution:
  Arrange: No setup is required as we are passing a static large number as an argument.
  Act: Invoke the 'findHighestSetBit' method with a large number.
  Assert: Use JUnit assertions to compare the actual result against the expected outcome. 
Validation: 
  The assertion aims to verify that the method correctly returns the position of the highest set bit even for large numbers. This test is important to ensure the method's performance and accuracy for large inputs.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class HighestSetBitFindHighestSetBitTest {
    @Test
    @Tag("valid")
    public void testPositiveNumber() {
        int testNum = 18; // binary: 10010, highest set bit at position 4
        Optional<Integer> expected = Optional.of(4);
        assertEquals(expected, HighestSetBit.findHighestSetBit(testNum));
    }
    @Test
    @Tag("invalid")
    public void testNegativeNumber() {
        int testNum = -5;
        assertThrows(IllegalArgumentException.class, () -> HighestSetBit.findHighestSetBit(testNum));
    }
    @Test
    @Tag("boundary")
    public void testZeroNumber() {
        int testNum = 0;
        Optional<Integer> expected = Optional.empty();
        assertEquals(expected, HighestSetBit.findHighestSetBit(testNum));
    }
    @Test
    @Tag("valid")
    public void testLargeNumber() {
        int testNum = 1048576; // binary: 100000000000000000000, highest set bit at position 20
        Optional<Integer> expected = Optional.of(20);
        assertEquals(expected, HighestSetBit.findHighestSetBit(testNum));
    }
}