

// ********RoostGPT********
/*
Test generated by RoostGPT for test abc12345 using AI Type  and AI Model 

ROOST_METHOD_HASH=bitSwap_0f3573991c
ROOST_METHOD_SIG_HASH=bitSwap_30e1953b6c

""" 
Scenario 1: Test bitSwap with same bit positions
Details:  
  TestName: testBitSwapWithSamePositions
  Description: This test is meant to check the bitSwap method when the positions of the bits to be swapped are the same.
  Execution:
    Arrange: Initialize data and set posA and posB to the same position.
    Act: Invoke the bitSwap method with the initialized parameters.
    Assert: Assert that the returned result is the same as the initial data.
  Validation: 
    The assertion verifies that swapping bits at the same position doesn't change the data. This confirms that the bitSwap method handles this edge case correctly.

Scenario 2: Test bitSwap with different bit positions
Details:  
  TestName: testBitSwapWithDifferentPositions
  Description: This test is meant to check the bitSwap method when the positions of the bits to be swapped are different.
  Execution:
    Arrange: Initialize data and set posA and posB to different positions.
    Act: Invoke the bitSwap method with the initialized parameters.
    Assert: Assert that the returned result is different from the initial data.
  Validation: 
    The assertion verifies that swapping bits at different positions changes the data. This confirms that the bitSwap method correctly swaps the bits at the specified positions.

Scenario 3: Test bitSwap with invalid bit positions
Details:  
  TestName: testBitSwapWithInvalidPositions
  Description: This test is meant to check the bitSwap method when the positions of the bits to be swapped are invalid.
  Execution:
    Arrange: Initialize data and set posA and posB to invalid positions (negative or greater than the bit length of data).
    Act: Invoke the bitSwap method with the initialized parameters.
    Assert: Assert that an exception is thrown.
  Validation: 
    The assertion verifies that providing invalid bit positions throws an exception. This confirms that the bitSwap method correctly handles invalid input.
"""
*/

// ********RoostGPT********

package com.thealgorithms.bitmanipulation;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import org.junit.jupiter.api.*;

public class BitSwapBitSwapTest {
    @Test
    @Tag("valid")
    public void testBitSwapWithSamePositions() {
        // Arrange
        int data = 13; // Binary: 1101
        int posA = 2;
        int posB = 2;
        // Act
        int result = BitSwap.bitSwap(data, posA, posB);
        // Assert
        assertThat(result).isEqualTo(data); // No change as the positions are the same
    }
    @Test
    @Tag("valid")
    public void testBitSwapWithDifferentPositions() {
        // Arrange
        int data = 13; // Binary: 1101
        int posA = 0;
        int posB = 2;
        // Act
        int result = BitSwap.bitSwap(data, posA, posB);
        // Assert
        assertThat(result).isNotEqualTo(data); // The data should change as we are swapping different bits
    }
    @Test
    @Tag("invalid")
    public void testBitSwapWithInvalidPositions() {
        // Arrange
        int data = 13; // Binary: 1101
        int posA = -1; // Invalid position
        int posB = 4; // Invalid position
        // Act & Assert
        assertThatThrownBy(() -> BitSwap.bitSwap(data, posA, posB))
                .isInstanceOf(IndexOutOfBoundsException.class); // Exception should be thrown for invalid positions
    }
}