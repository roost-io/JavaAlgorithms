// ********RoostGPT********
/*
Test generated by RoostGPT for test java-algos using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
Based on the provided method and class information, here are several JUnit test scenarios for the `of` method:
```
Scenario 1: Create a Job with Valid Parameters
Details:
  TestName: createJobWithValidParameters
  Description: Test the creation of a Job object with valid input parameters.
Execution:
  Arrange: Prepare valid input parameters for jobName, processingTime, and deadline.
  Act: Call the of method with these parameters.
  Assert: Verify that a non-null Job object is returned and its properties match the input.
Validation:
  This test ensures that the of method correctly creates a Job object when given valid inputs. It's crucial for verifying the basic functionality of the Job creation process.
Scenario 2: Create a Job with Minimum Valid Values
Details:
  TestName: createJobWithMinimumValidValues
  Description: Test the creation of a Job object with the minimum acceptable values for processingTime and deadline.
Execution:
  Arrange: Set up a jobName, and use 1 for both processingTime and deadline (assuming 0 or negative values are invalid).
  Act: Invoke the of method with these parameters.
  Assert: Check that a Job object is created with the specified minimum values.
Validation:
  This test verifies that the method can handle edge cases with minimum valid inputs, ensuring robustness in Job creation.
Scenario 3: Create a Job with Maximum Integer Values
Details:
  TestName: createJobWithMaximumIntegerValues
  Description: Test the creation of a Job object using Integer.MAX_VALUE for processingTime and deadline.
Execution:
  Arrange: Prepare a jobName and use Integer.MAX_VALUE for both processingTime and deadline.
  Act: Call the of method with these extreme values.
  Assert: Verify that a Job object is created correctly with these maximum values.
Validation:
  This test checks the method's ability to handle extreme integer values, which is important for understanding the upper limits of Job parameters.
Scenario 4: Create a Job with Null JobName
Details:
  TestName: createJobWithNullJobName
  Description: Test the behavior of the of method when passed a null value for jobName.
Execution:
  Arrange: Set up null for jobName and valid values for processingTime and deadline.
  Act: Attempt to create a Job using the of method with a null jobName.
  Assert: Expect an IllegalArgumentException or similar exception to be thrown.
Validation:
  This test ensures that the method properly handles null input for jobName, which is crucial for maintaining data integrity and preventing null pointer exceptions later.
Scenario 5: Create a Job with Negative ProcessingTime
Details:
  TestName: createJobWithNegativeProcessingTime
  Description: Test the of method's response to a negative value for processingTime.
Execution:
  Arrange: Prepare a valid jobName, a negative value for processingTime, and a valid deadline.
  Act: Try to create a Job using the of method with these parameters.
  Assert: Expect an IllegalArgumentException or similar exception to be thrown.
Validation:
  This test verifies that the method correctly rejects invalid negative values for processingTime, ensuring logical consistency in Job creation.
Scenario 6: Create a Job with Deadline Earlier Than ProcessingTime
Details:
  TestName: createJobWithDeadlineEarlierThanProcessingTime
  Description: Test creating a Job where the deadline is earlier than the processing time.
Execution:
  Arrange: Set up a valid jobName, a processingTime greater than the deadline.
  Act: Attempt to create a Job using the of method with these parameters.
  Assert: Check if the method handles this logically inconsistent scenario appropriately (e.g., throws an exception or adjusts values).
Validation:
  This test ensures that the method can handle or reject logically inconsistent inputs, which is important for maintaining the integrity of Job scheduling logic.
Scenario 7: Create Multiple Jobs and Verify Uniqueness
Details:
  TestName: createMultipleJobsAndVerifyUniqueness
  Description: Test creating multiple Job objects and verify that they are distinct instances.
Execution:
  Arrange: Prepare parameters for multiple Job creations.
  Act: Create several Job objects using the of method with different parameters.
  Assert: Verify that each created Job is a unique instance with correct, distinct properties.
Validation:
  This test ensures that the of method creates new instances for each call, which is important for maintaining the integrity of individual Job objects in a multi-job environment.
```
These test scenarios cover various aspects of the `of` method, including normal cases, edge cases, and potential error conditions. They aim to ensure the robustness and correctness of the Job creation process.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
class MinimizingLatenessOfTest {

	@Test
	void createJobWithValidParameters() {
		Job job = Job.of("TestJob", 10, 20);
		assertNotNull(job);
		assertEquals("TestJob", job.jobName);
		assertEquals(10, job.processingTime);
		assertEquals(20, job.deadline);
	}

	@Test
	void createJobWithMinimumValidValues() {
		Job job = Job.of("MinJob", 1, 1);
		assertNotNull(job);
		assertEquals("MinJob", job.jobName);
		assertEquals(1, job.processingTime);
		assertEquals(1, job.deadline);
	}

	@Test
	void createJobWithMaximumIntegerValues() {
		Job job = Job.of("MaxJob", Integer.MAX_VALUE, Integer.MAX_VALUE);
		assertNotNull(job);
		assertEquals("MaxJob", job.jobName);
		assertEquals(Integer.MAX_VALUE, job.processingTime);
		assertEquals(Integer.MAX_VALUE, job.deadline);
	}

	@Test
	void createJobWithNullJobName() {
		assertThrows(IllegalArgumentException.class, () -> Job.of(null, 10, 20));
	}

	@Test
	void createJobWithNegativeProcessingTime() {
		assertThrows(IllegalArgumentException.class, () -> Job.of("NegativeJob", -1, 20));
	}

	@Test
	void createJobWithDeadlineEarlierThanProcessingTime() {
		Job job = Job.of("EarlyDeadlineJob", 20, 10);
		assertNotNull(job);
		assertEquals("EarlyDeadlineJob", job.jobName);
		assertEquals(20, job.processingTime);
		assertEquals(10, job.deadline);
	}

	@Test
	void createMultipleJobsAndVerifyUniqueness() {
		Job job1 = Job.of("Job1", 10, 20);
		Job job2 = Job.of("Job2", 15, 25);
		Job job3 = Job.of("Job3", 5, 15);
		assertNotNull(job1);
		assertNotNull(job2);
		assertNotNull(job3);
		assertNotSame(job1, job2);
		assertNotSame(job1, job3);
		assertNotSame(job2, job3);
		assertEquals("Job1", job1.jobName);
		assertEquals(10, job1.processingTime);
		assertEquals(20, job1.deadline);
		assertEquals("Job2", job2.jobName);
		assertEquals(15, job2.processingTime);
		assertEquals(25, job2.deadline);
		assertEquals("Job3", job3.jobName);
		assertEquals(5, job3.processingTime);
		assertEquals(15, job3.deadline);
	}

	@ParameterizedTest
	@CsvSource({ "TestJob, 10, 20", "AnotherJob, 5, 15", "LongJob, 100, 200" })
	void createJobWithVariousParameters(String jobName, int processingTime, int deadline) {
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals(jobName, job.jobName);
		assertEquals(processingTime, job.processingTime);
		assertEquals(deadline, job.deadline);
	}

}