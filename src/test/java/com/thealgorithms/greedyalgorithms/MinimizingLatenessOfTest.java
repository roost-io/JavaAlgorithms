// ********RoostGPT********
/*
Test generated by RoostGPT for test java-algos using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c
================================VULNERABILITIES================================
Vulnerability: input validation
Issue: The method accepts user input for jobName, processingTime, and deadline without validation, potentially allowing malicious data to be processed.
Solution: Implement input validation for all parameters. For example, check that jobName is not null or empty, and that processingTime and deadline are positive integers within a reasonable range.
Vulnerability: immutability
Issue: The Job class might be mutable, allowing its state to be changed after creation, which could lead to unexpected behavior in multithreaded environments.
Solution: Make the Job class immutable by declaring all fields as final and providing only getter methods. This ensures thread-safety and prevents unauthorized modifications.
Vulnerability: null pointer exception
Issue: The method doesn't check for null jobName, which could lead to NullPointerException if called with null argument.
Solution: Add a null check for jobName and throw an IllegalArgumentException if it's null. For example: if (jobName == null) throw new IllegalArgumentException("jobName cannot be null");
Vulnerability: integer overflow
Issue: Large values for processingTime or deadline could cause integer overflow, leading to unexpected behavior or security vulnerabilities.
Solution: Implement bounds checking for processingTime and deadline. Consider using long instead of int if larger values are needed, and validate that the values are within an acceptable range.
================================================================================
Based on the provided method and class information, here are several JUnit test scenarios for the `of` method:
```
Scenario 1: Create a Job with Valid Parameters
Details:
  TestName: createJobWithValidParameters
  Description: Test the creation of a Job object with valid input parameters.
Execution:
  Arrange: Prepare valid input parameters for jobName, processingTime, and deadline.
  Act: Call the of method with these parameters.
  Assert: Verify that the returned Job object is not null and has the correct values for all fields.
Validation:
  This test ensures that the of method correctly creates and initializes a Job object when given valid inputs. It verifies that the factory method works as expected under normal conditions.
Scenario 2: Create a Job with Minimum Valid Values
Details:
  TestName: createJobWithMinimumValidValues
  Description: Test the creation of a Job object with the minimum acceptable values for processingTime and deadline.
Execution:
  Arrange: Set up input parameters with a valid jobName, processingTime of 1, and deadline of 1.
  Act: Invoke the of method with these parameters.
  Assert: Check that the returned Job object has the correct values, including startTime of 0 and lateness of 0.
Validation:
  This test verifies that the of method can handle the minimum valid values for processingTime and deadline, ensuring that edge cases are properly managed.
Scenario 3: Attempt to Create a Job with Null JobName
Details:
  TestName: createJobWithNullJobName
  Description: Test the behavior of the of method when passed a null value for jobName.
Execution:
  Arrange: Prepare null for jobName, and valid values for processingTime and deadline.
  Act: Call the of method with these parameters.
  Assert: Expect an IllegalArgumentException or similar exception to be thrown.
Validation:
  This test ensures that the method properly handles invalid input by rejecting null job names, maintaining data integrity.
Scenario 4: Attempt to Create a Job with Negative ProcessingTime
Details:
  TestName: createJobWithNegativeProcessingTime
  Description: Test the of method's response to a negative value for processingTime.
Execution:
  Arrange: Set up a valid jobName, a negative value for processingTime, and a valid deadline.
  Act: Invoke the of method with these parameters.
  Assert: Expect an IllegalArgumentException or similar exception to be thrown.
Validation:
  This test verifies that the method enforces the logical constraint that processing time cannot be negative, ensuring data validity.
Scenario 5: Attempt to Create a Job with Negative Deadline
Details:
  TestName: createJobWithNegativeDeadline
  Description: Test the of method's handling of a negative value for the deadline parameter.
Execution:
  Arrange: Prepare a valid jobName, a valid processingTime, and a negative value for deadline.
  Act: Call the of method with these parameters.
  Assert: Expect an IllegalArgumentException or similar exception to be thrown.
Validation:
  This test ensures that the method rejects illogical input where the deadline is set to a negative value, maintaining the integrity of the Job object's time-related properties.
Scenario 6: Create a Job with Large Values
Details:
  TestName: createJobWithLargeValues
  Description: Test the creation of a Job object with very large values for processingTime and deadline.
Execution:
  Arrange: Set up input parameters with a valid jobName, and very large integers for processingTime and deadline (e.g., Integer.MAX_VALUE).
  Act: Invoke the of method with these parameters.
  Assert: Verify that the returned Job object correctly holds these large values without overflow or precision loss.
Validation:
  This test checks the method's ability to handle extreme but valid input values, ensuring that the Job object can represent jobs with very long processing times or far-future deadlines.
```
These test scenarios cover various aspects of the `of` method, including normal operation, edge cases, and error handling. They aim to ensure the method behaves correctly under different conditions and maintains the integrity of the Job object it creates.
*/
// ********RoostGPT********
package com.thealgorithms.greedyalgorithms;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.*;

@Tag("com.thealgorithms.greedyalgorithms")
@Tag("com.thealgorithms.greedyalgorithms.of")
class MinimizingLatenessOfTest {

	@Test
	void createJobWithValidParameters() {
		Job job = Job.of("TestJob", 10, 20);
		assertNotNull(job);
		assertEquals("TestJob", job.jobName);
		assertEquals(10, job.processingTime);
		assertEquals(20, job.deadline);
		assertEquals(0, job.startTime);
		assertEquals(0, job.lateness);
	}

	@Test
	void createJobWithMinimumValidValues() {
		Job job = Job.of("MinJob", 1, 1);
		assertNotNull(job);
		assertEquals("MinJob", job.jobName);
		assertEquals(1, job.processingTime);
		assertEquals(1, job.deadline);
		assertEquals(0, job.startTime);
		assertEquals(0, job.lateness);
	}

	@Test
	void createJobWithNullJobName() {
		assertThrows(IllegalArgumentException.class, () -> Job.of(null, 10, 20));
	}

	@Test
	void createJobWithNegativeProcessingTime() {
		assertThrows(IllegalArgumentException.class, () -> Job.of("NegativeJob", -5, 20));
	}

	@Test
	void createJobWithNegativeDeadline() {
		assertThrows(IllegalArgumentException.class, () -> Job.of("NegativeDeadline", 10, -5));
	}

	@Test
	void createJobWithLargeValues() {
		Job job = Job.of("LargeJob", Integer.MAX_VALUE, Integer.MAX_VALUE);
		assertNotNull(job);
		assertEquals("LargeJob", job.jobName);
		assertEquals(Integer.MAX_VALUE, job.processingTime);
		assertEquals(Integer.MAX_VALUE, job.deadline);
	}

	@ParameterizedTest
	@CsvSource({ "Job1, 5, 10", "Job2, 100, 200", "Job3, 50, 50" })
	void createJobWithVariousValues(String jobName, int processingTime, int deadline) {
		Job job = Job.of(jobName, processingTime, deadline);
		assertNotNull(job);
		assertEquals(jobName, job.jobName);
		assertEquals(processingTime, job.processingTime);
		assertEquals(deadline, job.deadline);
		assertEquals(0, job.startTime);
		assertEquals(0, job.lateness);
	}

}